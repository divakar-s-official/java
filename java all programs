
1. Employee Package
2. Implementing of Inheritance and
Polymorphism and Inner class
3. Create a frame with specific size and
Position
4.Mouse Event
5. Calculator using Applet
6. Student Information in Text file
7. Animated Images using
Multithreading concepts
8. Socket Program
9. JDBC Connectivity
10. RMI
11. Tree Viewer
12. View Image in Java Bean
13. Random Numbers







Program:1
package employee;
public class Employee {
public int employeeNumber;
public String employeeName;
public double basicpay;
public Employee ( int employeeNumber,String employeeName) {aaa
this.employeeNumber=employeeNumber;
this.employeeName=employeeName;
}
public void setbasicpay(double basicpay)
{
this.basicpay=basicpay;
}
public void setbasicpay(double basicpay,double additionalbenefits)
{
this.basicpay=basicpay+additionalbenefits;
}
public int getEmployeeNumber()
{
return employeeNumber;
}
public String getEmployeeName()
{
return employeeName;
}
public double getbasicpay()
{
return basicpay;
}
public void displayEmployeeinfo()
{
System.out.println("employeeNumber:"+employeeNumber);
System.out.println("employeeName:"+employeeName);
System.out.println("Basicpay:$"+basicpay);
}
}
package employee;
public class EmployeeMain {
public static void main(String[] args) {
Employee emp1 = new Employee(1, "karthika");
emp1.setbasicpay(70000.0);
emp1.setbasicpay(60000.0, 5000.0);
System.out.println("Employee Information:");
emp1.displayEmployeeinfo();
}
}

Output:



Program:2
package drawing;
public class Shape {
public void draw() {
System.out.println("Drawing a shape");
}
}
class Circle extends Shape
{
public void draw() {
System.out.println("Drawing a circle");
}
}
class Rectangle extends Shape {
public void draw() {
System.out.println("Drawing a rectangle");
}
}
class Triangle extends Shape {
public void draw() {
System.out.println("Drawing a triangle");
}
}
package drawing;
public class Inner {
public static void drawShape(Shape shape) {
shape.draw();
}
public class PolymorphismExample {
public static void main(String[] args) {
Inner in = new Inner();
Shape circle = new Circle();
Shape rectangle = new Rectangle();
Shape triangle = new Triangle();
in.drawShape(circle);
in.drawShape(rectangle);
in.drawShape(triangle);
}
}
}
Output:


Program:3
package shapesshapes;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
public class DrawingApp extends JFrame {
private int frameWidth;
private int frameHeight;
private int frameXPosition;
private int frameYPosition;
private Shape currentShape;
private Color currentColor;
public DrawingApp(int width, int height, int xPosition, int yPosition) {
this.frameWidth = width;
this.frameHeight = height;
this.frameXPosition = xPosition;
this.frameYPosition = yPosition;
this.currentShape = null;
this.currentColor = Color.BLACK;
setTitle("Drawing App");
setSize(frameWidth, frameHeight);
setLocation(frameXPosition, frameYPosition);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
JMenuBar menuBar = new JMenuBar();
setJMenuBar(menuBar);
JMenu shapesMenu = new JMenu("Shapes");
menuBar.add(shapesMenu);
JMenuItem rectangleItem = new JMenuItem("Rectangle");
shapesMenu.add(rectangleItem);
JMenuItem circleItem = new JMenuItem("Circle");
shapesMenu.add(circleItem);
JMenuItem lineItem = new JMenuItem("Line");
shapesMenu.add(lineItem);
rectangleItem.addActionListener(new ActionListener()
public void actionPerformed(ActionEvent e) {
currentShape = Shape.RECTANGLE;
}
});
circleItem.addActionListener(new ActionListener()
public void actionPerformed(ActionEvent e) {
currentShape = Shape.CIRCLE;
}
});
lineItem.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
currentShape = Shape.LINE;
}
});
JMenu colorMenu = new JMenu("Color");
menuBar.add(colorMenu);
JMenuItem colorItem = new JMenuItem("Choose Color");
colorMenu.add(colorItem);
colorItem.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
currentColor = JColorChooser.showDialog(null, "Choose a Color", currentColor);
}
});
addMouseListener(new MouseAdapter() {
public void mouseClicked(MouseEvent e) {
int x = e.getX();
int y = e.getY();
Graphics g = getGraphics();
g.setColor(currentColor);
if (currentShape == Shape.RECTANGLE) {
g.fillRect(x, y, 50, 50);
} else if (currentShape == Shape.CIRCLE) {
g.fillOval(x, y, 50, 50);
} else if (currentShape == Shape.LINE) {
g.drawLine(x, y, x + 50, y + 50);
}
}
});
}
public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
int width = 400;
int height = 400;
int xPosition = 100;
int yPosition = 100;
DrawingApp app = new DrawingApp(width, height, xPosition, yPosition);
app.setVisible(true);
}
});
}
enum Shape {
RECTANGLE,
CIRCLE,
LINE
}}
Output:



Program:4
package mouse;
import java.awt.*;
import java.awt.event.*;
public class Mouse extends Frame implements MouseListener
{
Label l;
Mouse(){
addMouseListener(this);
l=new Label();
l.setBounds(20,50,100,20);
add(l);
setSize(300,300);
setLayout(null);
setVisible(true);
}
public void mouseClicked(MouseEvent e) {
l.setText("Mouse Clicked");
}
public void mouseEntered(MouseEvent e) {
l.setText("Mouse Entered");
}
public void mouseExited(MouseEvent e) {
l.setText("Mouse Exited");
}
public void mousePressed(MouseEvent e) {
l.setText("Mouse Pressed");
}
public void mouseReleased(MouseEvent e) {
l.setText("Mouse Released");
}
public static void main(String[] args) {
new Mouse();
}
}
Output:



Program:5
package shapes;
import java.awt.*;
import java.awt.event.*;
public class Calc implements ActionListener{
int c,n;
String s1,s2,s3,s4,s5;
Frame f;
Button b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17;
Panel p;
TextField tf;
GridLayout g;
Calc() {
f = new Frame("My calculator");
p = new Panel();
f.setLayout(new FlowLayout());
b1 = new Button("0");
b1.addActionListener(this);
b2 = new Button("1");
b2.addActionListener(this);
b3 = new Button("2");
b3.addActionListener(this);
b4 = new Button("3");
b4.addActionListener(this);
b5 = new Button("4");
b5.addActionListener(this);
b6 = new Button("5");
b6.addActionListener(this);
b7 = new Button("6");
b7.addActionListener(this);
b8 = new Button("7");
b8.addActionListener(this);
b9 = new Button("8");
b9.addActionListener(this);
b10 = new Button("9");
b10.addActionListener(this);
b11 = new Button("+");
b11.addActionListener(this);
b12 = new Button("-");
b12.addActionListener(this);
b13 = new Button("*");
b13.addActionListener(this);
b14 = new Button("/");
b14.addActionListener(this);
b15 = new Button("%");
b15.addActionListener(this);
b16 = new Button("=");
b16.addActionListener(this);
b17 = new Button("C");
b17.addActionListener(this);
tf = new TextField(20);
f.add(tf);
g = new GridLayout(4,4,10,20);
p.setLayout(g);
p.add(b1);p.add(b2);p.add(b3);p.add(b4);p.add(b5);p.add(b6);p.add(b7);p.add(b8);p.add(b9);
p.add(b10);p.add(b11);p.add(b12);p.add(b13);p.add(b14);p.add(b15);p.add(b16);p.add(b17);
f.add(p);
f.setSize(300,300);
f.setVisible(true);
}
public void actionPerformed(ActionEvent e) {
if(e.getSource()==b1){
s3 = tf.getText();
s4 = "0";
s5 = s3+s4;
tf.setText(s5); }
if(e.getSource()==b2) {
s3 = tf.getText();
s4 = "1";
s5 = s3+s4;
tf.setText(s5);}
if(e.getSource()==b3){
s3 = tf.getText();
s4 = "2";
s5 = s3+s4;
tf.setText(s5);}
if(e.getSource()==b4){
s3 = tf.getText();
s4 = "3";
s5 = s3+s4;
tf.setText(s5); }
if(e.getSource()==b5){
s3 = tf.getText();
s4 = "4";
s5 = s3+s4;
tf.setText(s5); }
if(e.getSource()==b6){
s3 = tf.getText();
s4 = "5";
s5 = s3+s4;
tf.setText(s5); }
if(e.getSource()==b7) {
s3 = tf.getText();
s4 = "6";
s5 = s3+s4;
tf.setText(s5); }
if(e.getSource()==b8) {
s3 = tf.getText();
s4 = "7";
s5 = s3+s4;
tf.setText(s5); }
if(e.getSource()==b9) {
s3 = tf.getText();
s4 = "8";
s5 = s3+s4;
tf.setText(s5); }
if(e.getSource()==b10){
s3 = tf.getText();
s4 = "9";
s5 = s3+s4;
tf.setText(s5); }
if(e.getSource()==b11) {
s1 = tf.getText();
tf.setText("");
c=1; }
if(e.getSource()==b12) {
s1 = tf.getText();
tf.setText("");
c=2;}
if(e.getSource()==b13) {
s1 = tf.getText();
tf.setText("");
c=3;}
if(e.getSource()==b14) {
s1 = tf.getText();
tf.setText("");
c=4; }
if(e.getSource()==b15) {
s1 = tf.getText();
tf.setText("");
c=5; }
if(e.getSource()==b16) {
s2 = tf.getText();
if(c==1) {
n = Integer.parseInt(s1)+Integer.parseInt(s2);
tf.setText(String.valueOf(n)); }
else
if(c==2){
n = Integer.parseInt(s1)-Integer.parseInt(s2);
tf.setText(String.valueOf(n)); }
else
if(c==3) {
n = Integer.parseInt(s1)*Integer.parseInt(s2);
tf.setText(String.valueOf(n)); }
if(c==4){
try {
int p=Integer.parseInt(s2);
if(p!=0){
n = Integer.parseInt(s1)/Integer.parseInt(s2);
tf.setText(String.valueOf(n));}
else
tf.setText("infinite");
}
catch(Exception i){}
}
if(c==5)
{
n = Integer.parseInt(s1)%Integer.parseInt(s2);
tf.setText(String.valueOf(n));
}
}
if(e.getSource()==b17)
{
tf.setText("");
}
}
public static void main(String[] abc)
{
Calc v = new Calc();
}
}
Output:



Program:6
package student;
import java.io.UnsupportedEncodingException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.IOException;
public class Textfile {
public static void main(String[] args) {
try{
File file=new File("Student.txt");
if(file.exists()){
file.createNewFile();
}
PrintWriter pw=new PrintWriter(file);
pw.println("student name : Srinivasan");
pw.println("Register no : 22mcab36");
pw.println("Phone Number :1234567890");
pw.println("Email Id : kvs123@gmail.com");
pw.close();
System.out.println("DONE");
}
catch (IOException e){
e.printStackTrace();
}
}
}
Output:





Program:7
package thread;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
public class ImageAnimator extends JFrame {
private JLabel imageLabel;
private Timer timer;
private String[] imagePaths = {
"C:\\Users\\WELCOME\\Downloads\\ball1.jpeg",
"C:\\Users\\WELCOME\\Downloads\\ball2.jpg"
// Add more image paths as needed
};
private int currentImageIndex = 0;
public ImageAnimator() {
setTitle("Image Animator");
setSize(600, 800);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
imageLabel = new JLabel();
add(imageLabel, BorderLayout.CENTER);
timer = new Timer(1000, new ActionListener() {
public void actionPerformed(ActionEvent e) {
displayNextImage();
}
});
timer.start();
}
private void displayNextImage() {
if (currentImageIndex < imagePaths.length) {
ImageIcon icon = new ImageIcon(imagePaths[currentImageIndex]);
imageLabel.setIcon(icon);
currentImageIndex++;
// Reset the index to loop through images
if (currentImageIndex >= imagePaths.length) {
currentImageIndex = 0;
}
}
}
public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
ImageAnimator animator = new ImageAnimator();
animator.setVisible(true);
}
});
}
}

Output:


Program:8
package socket;
Server:
import java.io.*;
import java.net.*;
public class MyServer {
public static void main(String[] args){
try{
ServerSocket ss=new ServerSocket(6666);
Socket s=ss.accept();//establishes connection
DataInputStream dis=new DataInputStream(s.getInputStream());
String str=(String)dis.readUTF();
System.out.println("message= "+str);
ss.close();
}catch(Exception e){System.out.println(e);}
}
}
Client:
import java.io.*;
import java.net.*;
public class MyClient {
public static void main(String[] args) {
try{
Socket s=new Socket("localhost",6666);
DataOutputStream dout=new DataOutputStream(s.getOutputStream());
dout.writeUTF("Hello Server");
dout.flush();
dout.close();
s.close();
}catch(Exception e){System.out.println(e);}
}
}
Output:





Program:9
package JDBCConnection;
import java.sql.*;
public class JDBCConnection {
public static void main (String[] args) throws SQLException{
String url="jdbc:ucanaccess://D:/Documents/PDF(for all)/4 Year/Java/JDBC/JAR
File/test_db.accdb";
Connection con=DriverManager.getConnection(url);
Statement s=con.createStatement();
ResultSet rs=s.executeQuery("select * from table1");
while (rs.next()) {
System.out.println(rs.getString(1)+"\t\t\t"+rs.getString(2)+"\t\t\t");
}
}
}
Output:



10. REMOTE METHOD INVOCATION (RMI)

Program:10
client.java
package rmi;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
public class client {
public static void main (String[] args)throws
MalformedURLException,RemoteException,NotBoundException{
Interfaceservice se=(Interfaceservice) Naming.lookup("rmi://localhost:5000/hello");
System.out.println(" --- "+ se.echo("hey server"));
}
}
Interfaceservice .java
package rmi;
import java.rmi.Remote;
import java.rmi.RemoteException;
public interface Interfaceservice extends Remote {
public String echo (String input) throws RemoteException;
}
ApplicationServer.java
package rmi;
import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import
java.rmi.registry.Registry; public class ApplicationServer {
public static void main (String[] args) throws RemoteException{
Registry registry =LocateRegistry.createRegistry(5000);
registry.rebind("hello",new ImplementingRemoteInterface() );
}
}
ImplementingRemoteInterface .java
package rmi;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
public class ImplementingRemoteInterface extends UnicastRemoteObject implements
Remote {
protected ImplementingRemoteInterface() throws RemoteException {
super();
// TODO Auto-generated constructor stub
}
private static final long serialVersionUID=1L;
public String echo(String input) throws RemoteException{
return "From server"+input;
}
}





Program:11
package tree;
import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
public class TreeViewer {
JFrame f;
TreeViewer() {
f=new JFrame();
DefaultMutableTreeNode style=new DefaultMutableTreeNode("Style");
DefaultMutableTreeNode color=new DefaultMutableTreeNode("Color");
DefaultMutableTreeNode font=new DefaultMutableTreeNode("Font");
style.add(color);
style.add(font);
DefaultMutableTreeNode red=new DefaultMutableTreeNode("red");
DefaultMutableTreeNode blue=new DefaultMutableTreeNode("blue");
DefaultMutableTreeNode black=new DefaultMutableTreeNode("black");
DefaultMutableTreeNode green=new DefaultMutableTreeNode("green");
color.add(red);
color.add(blue);
color.add(black);
color.add(green);
JTree jt=new JTree(style);
f.add(jt);
f.setSize(600,600);
f.setVisible(true); }
public static void main(String[] args) {
new TreeViewer();
}
}
Output:




Program:12
Package image;
import javax.swing.*;
import java.awt.*;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
public class ImageViewer {
 public static void main(String[] args) {
 // Create a JFrame
 JFrame frame = new JFrame("Image Viewer");
 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 frame.setSize(800, 600);
 System.out.println("Done");
 // Create a JLabel to display the image
 JLabel imageLabel = new JLabel();
 // Load an image and set it in the JLabel
 try {
 Image image = ImageIO.read(new File("C:\\Users\\902671\\Desktop\\ball_2.jpg"));
 imageLabel.setIcon(new ImageIcon(image));
 } catch (IOException e) {
 e.printStackTrace();
 }
 // Add the JLabel to the JFrame
 frame.add(imageLabel);
 // Center the JFrame on the screen
 frame.setLocationRelativeTo(null);
 // Make the JFrame visible
 frame.setVisible(true);
} }
Output:



13. Random Numbers
Program:13
package random.numbers;
public class RandomNumbers {
public static void main(String[] args) {
System.out.println("Random Numbers");
for(int i=0;i<10;i++)
{
System.out.println("Numbers for Random:"+(i+1)+Math.random());
}
}
}
Output:
Random Numbers
Numbers for Random:10.6340952607887226
Numbers for Random:20.7288421223904405
Numbers for Random:30.1802298562329644
Numbers for Random:40.7559101214581307
Numbers for Random:50.3066543436245728
Numbers for Random:60.6300242705942862
Numbers for Random:70.7056380239306909
Numbers for Random:80.8548142563877772
Numbers for Random:90.4867263242898888
Numbers for Random:100.10210589122217406
